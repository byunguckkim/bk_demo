// Copyright (C) 2023 Applied Intuition, Inc. All rights reserved.
// This source code file is distributed under and subject to the LICENSE in
// license.txt

// This file contains description proto for fragments in Spectral.
syntax = "proto3";

package simian_public.sensor_sim;

import "applied/simian/public/proto/planar.proto";

// Next ID for VehicleFragmentGeneration: 2
// Currently only supported for certain specific spectral assets.
// Please contact Applied team to access this feature.
message VehicleFragmentGeneration {
  // Sources of fragment generation.
  // Each source is a rectangular area that generates fragments with its own parameters.
  repeated FragmentSource fragment_sources = 1;

  // Next ID for FragmentSource: 13
  message FragmentSource {
    // Enable fragment generation.
    bool enable = 1;

    // Center of the generation source relative to asset mesh origin.
    simian_public.planar.Point2d center_point = 2;  // Position unit in [meter]

    // Length of the fragment generation source. For vehicles, this is the longitudinal axis.
    double noise_x_axis = 3;  // [meter]

    // Width of the fragment generation source. This is transverse across the truck.
    double noise_y_axis = 4;  // [meter]

    // Start time of this fragment generation source.
    double start_time = 5;  // [sec]

    // End time of this fragment generation source.
    double end_time = 6;  // [sec]

    // A factor that determines how fast the fragments generate.
    // factor of 1 means 1 fragment per Spectral frame.
    // 0 < factor < 1 means 1 fragment per 1/factor Spectral frames. 1/factor is ceiled.
    // factor > 1 means factor fragments per Spectral frame. factor is ceiled.
    // This value defaults to 1.
    double generation_rate_factor = 7;

    // Specification related to generated fragments.
    // Currently only radius_meters, scale_factor and linear damping affects fragment generation.
    FragmentDescription fragment_spec = 8;

    // Z axis offset of the center of the generation source relative to asset mesh origin.
    double source_height_meters = 9;

    // Height of the fragment generation source. This is the vertical axis.
    double noise_z_axis = 10;

    // Initial velocity of the fragments generated along z axis (positive points upwards).
    // Recommand a negative value so fragments have initial downward velocity.
    double initial_velocity_z_axis_meters_per_second = 11;

    // Apply custom Physical Material to fragments generated.
    // Only when set to true: friction, static_friction, sleep_linear_velocity_threshold_meters,
    // sleep_angular_velocity_threshold_radians affects simulation. Default: false
    bool use_custom_physical_material = 12;
  }
}

// <!-- Next ID: 11 -->
message FragmentDescription {
  // The radius of spheres that get removed from the terrain.
  // Valid range: [0.05 m, 0.20 m]
  // Default: 0.15 m
  float radius_meters = 1;  // [m]

  // The radius of a spawned sphere is this scale factor multiplied by radius_meters.
  // Valid range: [0.5, 1.0]
  // Default: 0.7
  float scale_factor = 2;  // [-]

  // Linear damping of fragments. Larger value causes the fragments to move more slowly.
  // Valid range: [2, 10] (only enforced for Dozer)
  // Default: 5.0
  float linear_damping = 3;  // [-]

  // This factor affects how much volume is added to the voxel terrain when a fragment is settles
  // back into voxel terrain. A value of 1 indicates that approximately the same volume is
  // deposited, but this depends on many factors (e.g., fragment_radius_meters). Currently only
  // affects fragments generated by bulldozing. Valid range: [0, 2] Default: 1
  float settling_expansion_factor = 4;  // [-]

  // The velocity magnitude below which spheres settles into voxel terrain.
  // Default: 0.02 m/s
  float settling_velocity_threshold_meters_per_second = 5;  // [m/s]

  // Coefficient of kinetic friction.
  // Normal range is [0,1] : 0.0 = no friction, 1.0+ = very high friction.
  // Default: 0.8
  float friction = 6;

  // Coefficient of static friction.
  // Normal range is [0,1] : 0.0 = no friction, 1.0+ = very high friction.
  // Default: 0.8
  float static_friction = 7;

  // If linear velocity of the fragment is lower than this threshold, its linear movement is
  // freezed. Default: 0.01
  float sleep_linear_velocity_threshold_meters = 8;  // [m/s]

  // If angular velocity of the fragment is lower than this threshold, its rolling movement is
  // freezed. Default: 0.05
  float sleep_angular_velocity_threshold_radians = 9;  // [rad/s]

  // Angular damping of fragments. Larger value causes the fragments to rotate more slowly.
  // Default: 0.0
  float angular_damping = 10;
}
